# render.yaml (in the root of your repository)

services:
  # --- Service 1: LaTeX CV Generator (Already defined, assuming port 3001) ---
  - type: web
    name: latex-cv-generator
    env: node # Or python, etc.
    plan: free # Or your desired plan
    branch: main
    rootDir: ./auth-backend/latex-cv-generator # Path to generator code
    aptPackages:
      - texlive-full
      - ghostscript
    buildCommand: "npm install" # Add && npm run build if needed
    startCommand: "npm start" # Ensure this starts the generator service
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT # Render provides this, ensure your app uses it
        value: 3001 # The internal port your generator listens on

  # --- Service 2: Main Auth Backend (Port 5000) ---
  - type: web
    name: auth-service # A unique name for this service
    env: node # Or python, etc. - specify the language runtime
    plan: free
    branch: main
    rootDir: ./auth-backend # Assuming main auth code is here
    buildCommand: "npm install" # Command to install dependencies
    startCommand: "npm start" # Command to start the auth server
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT # Render provides this, ensure your app uses it
        value: 5000 # The internal port your auth backend listens on
      # Add other env vars needed by the auth service (DB URLs, secrets, etc.)
      # - key: DATABASE_URL
      #   value: your_database_connection_string
      # - key: JWT_SECRET
      #   fromSecretKeyRef: # Example for using Render secrets
      #     name: auth-secrets # Name of the secret group in Render
      #     key: jwt-secret-key # Key within the secret group

  # --- Service 3: Other Backend (Port 3001 - Adjust if needed) ---
  # Note: Your generator is also using 3001 internally in the example.
  # Ensure your *actual* other backend uses a different internal port if they
  # are separate processes, or adjust the generator's port.
  # Let's assume the *other* backend should use 3002 internally for this example.
  

  # --- Service 4: Frontend (Port 8080 - Static Build) ---
  - type: static_site # <--- Corrected type here
    name: frontend
    plan: free
    branch: main
    rootDir: ./frontend # Assuming frontend code is here
    buildCommand: "npm install && npm run build" # Typical build command
    publishDir: ./dist # The folder containing the build output (e.g., dist, build)
    # Environment variables needed *at build time* for the frontend
    envVars:
      # Example for Create React App (adjust prefixes like VITE_, NEXT_PUBLIC_ if needed)
      - key: REACT_APP_AUTH_API_URL
        fromService:
          type: web
          name: auth-service # Get URL from the deployed auth service
          property: url
      - key: REACT_APP_OTHER_API_URL
        fromService:
          type: web
          name: other-backend # Get URL from the deployed other backend
          property: url
      - key: REACT_APP_GENERATOR_API_URL
        fromService:
          type: web
          name: latex-cv-generator # Get URL from the deployed generator service
          property: url

